// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

enum RTMPSettingsRequestQualityEnum {
  n1080p('1080p'),
  n1440p('1440p'),
  n360p('360p'),
  n480p('480p'),
  n720p('720p'),
  portrait1080x1920('portrait-1080x1920'),
  portrait1440x2560('portrait-1440x2560'),
  portrait360x640('portrait-360x640'),
  portrait480x854('portrait-480x854'),
  portrait720x1280('portrait-720x1280'),
  unknown('_unknown');

  const RTMPSettingsRequestQualityEnum(this.value);
  final String value;

  static RTMPSettingsRequestQualityEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case '1080p':
        return RTMPSettingsRequestQualityEnum.n1080p;
      case '1440p':
        return RTMPSettingsRequestQualityEnum.n1440p;
      case '360p':
        return RTMPSettingsRequestQualityEnum.n360p;
      case '480p':
        return RTMPSettingsRequestQualityEnum.n480p;
      case '720p':
        return RTMPSettingsRequestQualityEnum.n720p;
      case 'portrait-1080x1920':
        return RTMPSettingsRequestQualityEnum.portrait1080x1920;
      case 'portrait-1440x2560':
        return RTMPSettingsRequestQualityEnum.portrait1440x2560;
      case 'portrait-360x640':
        return RTMPSettingsRequestQualityEnum.portrait360x640;
      case 'portrait-480x854':
        return RTMPSettingsRequestQualityEnum.portrait480x854;
      case 'portrait-720x1280':
        return RTMPSettingsRequestQualityEnum.portrait720x1280;
      default:
        return RTMPSettingsRequestQualityEnum.unknown;
    }
  }
}

@immutable
class RTMPSettingsRequest {
  const RTMPSettingsRequest({
    this.enabled,
    this.quality,
  });

  final bool? enabled;

  final RTMPSettingsRequestQualityEnum? quality;

  Map<String, dynamic> toJson() {
    return {
      'enabled': enabled,
      'quality': quality,
    };
  }

  static RTMPSettingsRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RTMPSettingsRequest(
        enabled: mapValueOfType<bool?>(json, r'enabled', null),
        quality: RTMPSettingsRequestQualityEnum.fromValue(json['quality']),
      );
    }
    return null;
  }

  static List<RTMPSettingsRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RTMPSettingsRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RTMPSettingsRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RTMPSettingsRequest('
        'enabled: $enabled, '
        'quality: $quality, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RTMPSettingsRequest &&
        other.enabled == enabled &&
        other.quality == quality;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      enabled,
      quality,
    ]);
  }
}
