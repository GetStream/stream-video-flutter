// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class EgressResponse {
  const EgressResponse({
    required this.broadcasting,
    this.frameRecording,
    this.hls,
    required this.rtmps,
  });

  final bool broadcasting;

  final FrameRecordingResponse? frameRecording;

  final EgressHLSResponse? hls;

  final List<EgressRTMPResponse> rtmps;

  Map<String, dynamic> toJson() {
    return {
      'broadcasting': broadcasting,
      'frame_recording': frameRecording,
      'hls': hls,
      'rtmps': rtmps,
    };
  }

  static EgressResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return EgressResponse(
        broadcasting: mapValueOfType<bool>(json, r'broadcasting')!,
        frameRecording:
            FrameRecordingResponse?.fromJson(json[r'frame_recording'] ?? null),
        hls: EgressHLSResponse?.fromJson(json[r'hls'] ?? null),
        rtmps: EgressRTMPResponse.listFromJson(json[r'rtmps'])!,
      );
    }
    return null;
  }

  static List<EgressResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <EgressResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = EgressResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'EgressResponse('
        'broadcasting: $broadcasting, '
        'frameRecording: $frameRecording, '
        'hls: $hls, '
        'rtmps: $rtmps, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is EgressResponse &&
        other.broadcasting == broadcasting &&
        other.frameRecording == frameRecording &&
        other.hls == hls &&
        other.rtmps == rtmps;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      broadcasting,
      frameRecording,
      hls,
      rtmps,
    ]);
  }
}
