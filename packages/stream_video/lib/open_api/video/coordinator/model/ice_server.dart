// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class ICEServer {
  const ICEServer({
    required this.password,
    required this.urls,
    required this.username,
  });

  final String password;

  final List<String> urls;

  final String username;

  Map<String, dynamic> toJson() {
    return {
      'password': password,
      'urls': urls,
      'username': username,
    };
  }

  static ICEServer? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ICEServer(
        password: mapValueOfType<String>(json, r'password')!,
        urls: json[r'urls'] is Iterable
            ? (json[r'urls'] as Iterable).cast<String>().toList(growable: false)
            : const []!,
        username: mapValueOfType<String>(json, r'username')!,
      );
    }
    return null;
  }

  static List<ICEServer> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ICEServer>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ICEServer.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ICEServer('
        'password: $password, '
        'urls: $urls, '
        'username: $username, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ICEServer &&
        other.password == password &&
        other.urls == urls &&
        other.username == username;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      password,
      urls,
      username,
    ]);
  }
}
