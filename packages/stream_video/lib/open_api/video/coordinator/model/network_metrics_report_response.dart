// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class NetworkMetricsReportResponse {
  const NetworkMetricsReportResponse({
    this.averageConnectionTime,
    this.averageJitter,
    this.averageLatency,
    this.averageTimeToReconnect,
  });

  final num? averageConnectionTime;

  final num? averageJitter;

  final num? averageLatency;

  final num? averageTimeToReconnect;

  Map<String, dynamic> toJson() {
    return {
      'average_connection_time': averageConnectionTime,
      'average_jitter': averageJitter,
      'average_latency': averageLatency,
      'average_time_to_reconnect': averageTimeToReconnect,
    };
  }

  static NetworkMetricsReportResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return NetworkMetricsReportResponse(
        averageConnectionTime:
            mapValueOfType<num>(json, r'average_connection_time', null),
        averageJitter: mapValueOfType<num>(json, r'average_jitter', null),
        averageLatency: mapValueOfType<num>(json, r'average_latency', null),
        averageTimeToReconnect:
            mapValueOfType<num>(json, r'average_time_to_reconnect', null),
      );
    }
    return null;
  }

  static List<NetworkMetricsReportResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <NetworkMetricsReportResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = NetworkMetricsReportResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'NetworkMetricsReportResponse('
        'averageConnectionTime: $averageConnectionTime, '
        'averageJitter: $averageJitter, '
        'averageLatency: $averageLatency, '
        'averageTimeToReconnect: $averageTimeToReconnect, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is NetworkMetricsReportResponse &&
        other.averageConnectionTime == averageConnectionTime &&
        other.averageJitter == averageJitter &&
        other.averageLatency == averageLatency &&
        other.averageTimeToReconnect == averageTimeToReconnect;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      averageConnectionTime,
      averageJitter,
      averageLatency,
      averageTimeToReconnect,
    ]);
  }
}
