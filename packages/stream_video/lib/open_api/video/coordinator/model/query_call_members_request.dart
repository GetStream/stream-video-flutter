// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class QueryCallMembersRequest {
  const QueryCallMembersRequest({
    this.filterConditions,
    required this.id,
    this.limit,
    this.next,
    this.prev,
    this.sort,
    required this.type,
  });

  final Map<String, Object>? filterConditions;

  final String id;

  final int? limit;

  final String? next;

  final String? prev;

  final List<SortParamRequest>? sort;

  final String type;

  Map<String, dynamic> toJson() {
    return {
      'filter_conditions': filterConditions,
      'id': id,
      'limit': limit,
      'next': next,
      'prev': prev,
      'sort': sort,
      'type': type,
    };
  }

  static QueryCallMembersRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return QueryCallMembersRequest(
        filterConditions:
            mapCastOfType<String, Object>(json, r'filter_conditions'),
        id: mapValueOfType<String>(json, r'id')!,
        limit: mapValueOfType<int?>(json, r'limit', null),
        next: mapValueOfType<String?>(json, r'next', null),
        prev: mapValueOfType<String?>(json, r'prev', null),
        sort: SortParamRequest.listFromJson(json[r'sort']),
        type: mapValueOfType<String>(json, r'type')!,
      );
    }
    return null;
  }

  static List<QueryCallMembersRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <QueryCallMembersRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = QueryCallMembersRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'QueryCallMembersRequest('
        'filterConditions: $filterConditions, '
        'id: $id, '
        'limit: $limit, '
        'next: $next, '
        'prev: $prev, '
        'sort: $sort, '
        'type: $type, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is QueryCallMembersRequest &&
        other.filterConditions == filterConditions &&
        other.id == id &&
        other.limit == limit &&
        other.next == next &&
        other.prev == prev &&
        other.sort == sort &&
        other.type == type;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      filterConditions,
      id,
      limit,
      next,
      prev,
      sort,
      type,
    ]);
  }
}
