// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class TargetResolution {
  const TargetResolution({
    this.bitrate,
    required this.height,
    required this.width,
  });

  final int? bitrate;

  final int height;

  final int width;

  Map<String, dynamic> toJson() {
    return {
      'bitrate': bitrate,
      'height': height,
      'width': width,
    };
  }

  static TargetResolution? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return TargetResolution(
        bitrate: mapValueOfType<int?>(json, r'bitrate', null),
        height: mapValueOfType<int>(json, r'height')!,
        width: mapValueOfType<int>(json, r'width')!,
      );
    }
    return null;
  }

  static List<TargetResolution> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <TargetResolution>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = TargetResolution.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'TargetResolution('
        'bitrate: $bitrate, '
        'height: $height, '
        'width: $width, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is TargetResolution &&
        other.bitrate == bitrate &&
        other.height == height &&
        other.width == width;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      bitrate,
      height,
      width,
    ]);
  }
}
