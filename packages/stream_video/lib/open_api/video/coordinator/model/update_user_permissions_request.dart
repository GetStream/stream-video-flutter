// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class UpdateUserPermissionsRequest {
  const UpdateUserPermissionsRequest({
    this.grantPermissions,
    this.revokePermissions,
    required this.userId,
  });

  final List<String>? grantPermissions;

  final List<String>? revokePermissions;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'grant_permissions': grantPermissions,
      'revoke_permissions': revokePermissions,
      'user_id': userId,
    };
  }

  static UpdateUserPermissionsRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UpdateUserPermissionsRequest(
        grantPermissions: json[r'grant_permissions'] is Iterable
            ? (json[r'grant_permissions'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        revokePermissions: json[r'revoke_permissions'] is Iterable
            ? (json[r'revoke_permissions'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<UpdateUserPermissionsRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UpdateUserPermissionsRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UpdateUserPermissionsRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UpdateUserPermissionsRequest('
        'grantPermissions: $grantPermissions, '
        'revokePermissions: $revokePermissions, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UpdateUserPermissionsRequest &&
        other.grantPermissions == grantPermissions &&
        other.revokePermissions == revokePermissions &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      grantPermissions,
      revokePermissions,
      userId,
    ]);
  }
}
