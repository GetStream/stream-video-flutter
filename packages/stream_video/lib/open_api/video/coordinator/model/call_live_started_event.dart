// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CallLiveStartedEvent {
  const CallLiveStartedEvent({
    required this.call,
    required this.callCid,
    required this.createdAt,
    required this.type,
  });

  final CallResponse call;

  final String callCid;

  final DateTime createdAt;

  final String type;

  Map<String, dynamic> toJson() {
    return {
      'call': call,
      'call_cid': callCid,
      'created_at': createdAt,
      'type': type,
    };
  }

  static CallLiveStartedEvent? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallLiveStartedEvent(
        call: CallResponse.fromJson(json[r'call'])!,
        callCid: mapValueOfType<String>(json, r'call_cid')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        type: mapValueOfType<String>(json, r'type', "call.live_started")!,
      );
    }
    return null;
  }

  static List<CallLiveStartedEvent> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallLiveStartedEvent>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallLiveStartedEvent.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallLiveStartedEvent('
        'call: $call, '
        'callCid: $callCid, '
        'createdAt: $createdAt, '
        'type: $type, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallLiveStartedEvent &&
        other.call == call &&
        other.callCid == callCid &&
        other.createdAt == createdAt &&
        other.type == type;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      call,
      callCid,
      createdAt,
      type,
    ]);
  }
}
