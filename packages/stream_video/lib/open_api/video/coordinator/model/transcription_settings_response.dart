// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

enum TranscriptionSettingsResponseClosedCaptionModeEnum {
  autoOn('auto-on'),
  available('available'),
  disabled('disabled'),
  unknown('_unknown');

  const TranscriptionSettingsResponseClosedCaptionModeEnum(this.value);
  final String value;

  static TranscriptionSettingsResponseClosedCaptionModeEnum? fromValue(
      String? json) {
    switch (json) {
      case null:
        return null;
      case 'auto-on':
        return TranscriptionSettingsResponseClosedCaptionModeEnum.autoOn;
      case 'available':
        return TranscriptionSettingsResponseClosedCaptionModeEnum.available;
      case 'disabled':
        return TranscriptionSettingsResponseClosedCaptionModeEnum.disabled;
      default:
        return TranscriptionSettingsResponseClosedCaptionModeEnum.unknown;
    }
  }
}

enum TranscriptionSettingsResponseLanguageEnum {
  ar('ar'),
  auto('auto'),
  bg('bg'),
  ca('ca'),
  cs('cs'),
  da('da'),
  de('de'),
  el('el'),
  en('en'),
  es('es'),
  et('et'),
  fi('fi'),
  fr('fr'),
  he('he'),
  hi('hi'),
  hr('hr'),
  hu('hu'),
  id('id'),
  it('it'),
  ja('ja'),
  ko('ko'),
  ms('ms'),
  nl('nl'),
  no('no'),
  pl('pl'),
  pt('pt'),
  ro('ro'),
  ru('ru'),
  sk('sk'),
  sl('sl'),
  sv('sv'),
  ta('ta'),
  th('th'),
  tl('tl'),
  tr('tr'),
  uk('uk'),
  zh('zh'),
  unknown('_unknown');

  const TranscriptionSettingsResponseLanguageEnum(this.value);
  final String value;

  static TranscriptionSettingsResponseLanguageEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'ar':
        return TranscriptionSettingsResponseLanguageEnum.ar;
      case 'auto':
        return TranscriptionSettingsResponseLanguageEnum.auto;
      case 'bg':
        return TranscriptionSettingsResponseLanguageEnum.bg;
      case 'ca':
        return TranscriptionSettingsResponseLanguageEnum.ca;
      case 'cs':
        return TranscriptionSettingsResponseLanguageEnum.cs;
      case 'da':
        return TranscriptionSettingsResponseLanguageEnum.da;
      case 'de':
        return TranscriptionSettingsResponseLanguageEnum.de;
      case 'el':
        return TranscriptionSettingsResponseLanguageEnum.el;
      case 'en':
        return TranscriptionSettingsResponseLanguageEnum.en;
      case 'es':
        return TranscriptionSettingsResponseLanguageEnum.es;
      case 'et':
        return TranscriptionSettingsResponseLanguageEnum.et;
      case 'fi':
        return TranscriptionSettingsResponseLanguageEnum.fi;
      case 'fr':
        return TranscriptionSettingsResponseLanguageEnum.fr;
      case 'he':
        return TranscriptionSettingsResponseLanguageEnum.he;
      case 'hi':
        return TranscriptionSettingsResponseLanguageEnum.hi;
      case 'hr':
        return TranscriptionSettingsResponseLanguageEnum.hr;
      case 'hu':
        return TranscriptionSettingsResponseLanguageEnum.hu;
      case 'id':
        return TranscriptionSettingsResponseLanguageEnum.id;
      case 'it':
        return TranscriptionSettingsResponseLanguageEnum.it;
      case 'ja':
        return TranscriptionSettingsResponseLanguageEnum.ja;
      case 'ko':
        return TranscriptionSettingsResponseLanguageEnum.ko;
      case 'ms':
        return TranscriptionSettingsResponseLanguageEnum.ms;
      case 'nl':
        return TranscriptionSettingsResponseLanguageEnum.nl;
      case 'no':
        return TranscriptionSettingsResponseLanguageEnum.no;
      case 'pl':
        return TranscriptionSettingsResponseLanguageEnum.pl;
      case 'pt':
        return TranscriptionSettingsResponseLanguageEnum.pt;
      case 'ro':
        return TranscriptionSettingsResponseLanguageEnum.ro;
      case 'ru':
        return TranscriptionSettingsResponseLanguageEnum.ru;
      case 'sk':
        return TranscriptionSettingsResponseLanguageEnum.sk;
      case 'sl':
        return TranscriptionSettingsResponseLanguageEnum.sl;
      case 'sv':
        return TranscriptionSettingsResponseLanguageEnum.sv;
      case 'ta':
        return TranscriptionSettingsResponseLanguageEnum.ta;
      case 'th':
        return TranscriptionSettingsResponseLanguageEnum.th;
      case 'tl':
        return TranscriptionSettingsResponseLanguageEnum.tl;
      case 'tr':
        return TranscriptionSettingsResponseLanguageEnum.tr;
      case 'uk':
        return TranscriptionSettingsResponseLanguageEnum.uk;
      case 'zh':
        return TranscriptionSettingsResponseLanguageEnum.zh;
      default:
        return TranscriptionSettingsResponseLanguageEnum.unknown;
    }
  }
}

enum TranscriptionSettingsResponseModeEnum {
  autoOn('auto-on'),
  available('available'),
  disabled('disabled'),
  unknown('_unknown');

  const TranscriptionSettingsResponseModeEnum(this.value);
  final String value;

  static TranscriptionSettingsResponseModeEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'auto-on':
        return TranscriptionSettingsResponseModeEnum.autoOn;
      case 'available':
        return TranscriptionSettingsResponseModeEnum.available;
      case 'disabled':
        return TranscriptionSettingsResponseModeEnum.disabled;
      default:
        return TranscriptionSettingsResponseModeEnum.unknown;
    }
  }
}

@immutable
class TranscriptionSettingsResponse {
  const TranscriptionSettingsResponse({
    required this.closedCaptionMode,
    required this.language,
    required this.mode,
  });

  final TranscriptionSettingsResponseClosedCaptionModeEnum closedCaptionMode;

  final TranscriptionSettingsResponseLanguageEnum language;

  final TranscriptionSettingsResponseModeEnum mode;

  Map<String, dynamic> toJson() {
    return {
      'closed_caption_mode': closedCaptionMode,
      'language': language,
      'mode': mode,
    };
  }

  static TranscriptionSettingsResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return TranscriptionSettingsResponse(
        closedCaptionMode:
            TranscriptionSettingsResponseClosedCaptionModeEnum.fromValue(
                json['closed_caption_mode'])!,
        language: TranscriptionSettingsResponseLanguageEnum.fromValue(
            json['language'])!,
        mode: TranscriptionSettingsResponseModeEnum.fromValue(json['mode'])!,
      );
    }
    return null;
  }

  static List<TranscriptionSettingsResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <TranscriptionSettingsResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = TranscriptionSettingsResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'TranscriptionSettingsResponse('
        'closedCaptionMode: $closedCaptionMode, '
        'language: $language, '
        'mode: $mode, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is TranscriptionSettingsResponse &&
        other.closedCaptionMode == closedCaptionMode &&
        other.language == language &&
        other.mode == mode;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      closedCaptionMode,
      language,
      mode,
    ]);
  }
}
