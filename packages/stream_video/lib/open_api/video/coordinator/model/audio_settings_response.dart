// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

enum AudioSettingsResponseDefaultDeviceEnum {
  earpiece('earpiece'),
  speaker('speaker'),
  unknown('_unknown');

  const AudioSettingsResponseDefaultDeviceEnum(this.value);
  final String value;

  static AudioSettingsResponseDefaultDeviceEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'earpiece':
        return AudioSettingsResponseDefaultDeviceEnum.earpiece;
      case 'speaker':
        return AudioSettingsResponseDefaultDeviceEnum.speaker;
      default:
        return AudioSettingsResponseDefaultDeviceEnum.unknown;
    }
  }
}

@immutable
class AudioSettingsResponse {
  const AudioSettingsResponse({
    required this.accessRequestEnabled,
    required this.defaultDevice,
    required this.micDefaultOn,
    this.noiseCancellation,
    required this.opusDtxEnabled,
    required this.redundantCodingEnabled,
    required this.speakerDefaultOn,
  });

  final bool accessRequestEnabled;

  final AudioSettingsResponseDefaultDeviceEnum defaultDevice;

  final bool micDefaultOn;

  final NoiseCancellationSettings? noiseCancellation;

  final bool opusDtxEnabled;

  final bool redundantCodingEnabled;

  final bool speakerDefaultOn;

  Map<String, dynamic> toJson() {
    return {
      'access_request_enabled': accessRequestEnabled,
      'default_device': defaultDevice,
      'mic_default_on': micDefaultOn,
      'noise_cancellation': noiseCancellation,
      'opus_dtx_enabled': opusDtxEnabled,
      'redundant_coding_enabled': redundantCodingEnabled,
      'speaker_default_on': speakerDefaultOn,
    };
  }

  static AudioSettingsResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return AudioSettingsResponse(
        accessRequestEnabled:
            mapValueOfType<bool>(json, r'access_request_enabled')!,
        defaultDevice: AudioSettingsResponseDefaultDeviceEnum.fromValue(
            json['default_device'])!,
        micDefaultOn: mapValueOfType<bool>(json, r'mic_default_on')!,
        noiseCancellation: NoiseCancellationSettings.fromJson(
            json[r'noise_cancellation'] ?? null),
        opusDtxEnabled: mapValueOfType<bool>(json, r'opus_dtx_enabled')!,
        redundantCodingEnabled:
            mapValueOfType<bool>(json, r'redundant_coding_enabled')!,
        speakerDefaultOn: mapValueOfType<bool>(json, r'speaker_default_on')!,
      );
    }
    return null;
  }

  static List<AudioSettingsResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <AudioSettingsResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = AudioSettingsResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'AudioSettingsResponse('
        'accessRequestEnabled: $accessRequestEnabled, '
        'defaultDevice: $defaultDevice, '
        'micDefaultOn: $micDefaultOn, '
        'noiseCancellation: $noiseCancellation, '
        'opusDtxEnabled: $opusDtxEnabled, '
        'redundantCodingEnabled: $redundantCodingEnabled, '
        'speakerDefaultOn: $speakerDefaultOn, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AudioSettingsResponse &&
        other.accessRequestEnabled == accessRequestEnabled &&
        other.defaultDevice == defaultDevice &&
        other.micDefaultOn == micDefaultOn &&
        other.noiseCancellation == noiseCancellation &&
        other.opusDtxEnabled == opusDtxEnabled &&
        other.redundantCodingEnabled == redundantCodingEnabled &&
        other.speakerDefaultOn == speakerDefaultOn;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      accessRequestEnabled,
      defaultDevice,
      micDefaultOn,
      noiseCancellation,
      opusDtxEnabled,
      redundantCodingEnabled,
      speakerDefaultOn,
    ]);
  }
}
