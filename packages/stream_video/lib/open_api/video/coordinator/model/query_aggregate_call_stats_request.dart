// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class QueryAggregateCallStatsRequest {
  const QueryAggregateCallStatsRequest({
    this.from,
    this.reportTypes,
    this.to,
  });

  final String? from;

  final List<String>? reportTypes;

  final String? to;

  Map<String, dynamic> toJson() {
    return {
      'from': from,
      'report_types': reportTypes,
      'to': to,
    };
  }

  static QueryAggregateCallStatsRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return QueryAggregateCallStatsRequest(
        from: mapValueOfType<String>(json, r'from', null),
        reportTypes: json[r'report_types'] is Iterable
            ? (json[r'report_types'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        to: mapValueOfType<String>(json, r'to', null),
      );
    }
    return null;
  }

  static List<QueryAggregateCallStatsRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <QueryAggregateCallStatsRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = QueryAggregateCallStatsRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'QueryAggregateCallStatsRequest('
        'from: $from, '
        'reportTypes: $reportTypes, '
        'to: $to, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is QueryAggregateCallStatsRequest &&
        other.from == from &&
        other.reportTypes == reportTypes &&
        other.to == to;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      from,
      reportTypes,
      to,
    ]);
  }
}
