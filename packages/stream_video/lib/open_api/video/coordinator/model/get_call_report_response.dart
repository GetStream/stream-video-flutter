// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class GetCallReportResponse {
  const GetCallReportResponse({
    this.chatActivity,
    required this.duration,
    required this.report,
    required this.sessionId,
    this.videoReactions,
  });

  final ChatActivityStatsResponse? chatActivity;

  final String duration;

  final ReportResponse report;

  final String sessionId;

  final List<VideoReactionsResponse>? videoReactions;

  Map<String, dynamic> toJson() {
    return {
      'chat_activity': chatActivity,
      'duration': duration,
      'report': report,
      'session_id': sessionId,
      'video_reactions': videoReactions,
    };
  }

  static GetCallReportResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return GetCallReportResponse(
        chatActivity:
            ChatActivityStatsResponse?.fromJson(json[r'chat_activity'] ?? null),
        duration: mapValueOfType<String>(json, r'duration')!,
        report: ReportResponse.fromJson(json[r'report'])!,
        sessionId: mapValueOfType<String>(json, r'session_id')!,
        videoReactions:
            VideoReactionsResponse.listFromJson(json[r'video_reactions']),
      );
    }
    return null;
  }

  static List<GetCallReportResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <GetCallReportResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = GetCallReportResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'GetCallReportResponse('
        'chatActivity: $chatActivity, '
        'duration: $duration, '
        'report: $report, '
        'sessionId: $sessionId, '
        'videoReactions: $videoReactions, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is GetCallReportResponse &&
        other.chatActivity == chatActivity &&
        other.duration == duration &&
        other.report == report &&
        other.sessionId == sessionId &&
        other.videoReactions == videoReactions;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      chatActivity,
      duration,
      report,
      sessionId,
      videoReactions,
    ]);
  }
}
