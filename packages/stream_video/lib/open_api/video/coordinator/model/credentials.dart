// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class Credentials {
  const Credentials({
    required this.iceServers,
    required this.server,
    required this.token,
  });

  final List<ICEServer> iceServers;

  final SFUResponse server;

  final String token;

  Map<String, dynamic> toJson() {
    return {
      'ice_servers': iceServers,
      'server': server,
      'token': token,
    };
  }

  static Credentials? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Credentials(
        iceServers: ICEServer.listFromJson(json[r'ice_servers'])!,
        server: SFUResponse.fromJson(json[r'server'])!,
        token: mapValueOfType<String>(json, r'token')!,
      );
    }
    return null;
  }

  static List<Credentials> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Credentials>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Credentials.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Credentials('
        'iceServers: $iceServers, '
        'server: $server, '
        'token: $token, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Credentials &&
        other.iceServers == iceServers &&
        other.server == server &&
        other.token == token;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      iceServers,
      server,
      token,
    ]);
  }
}
