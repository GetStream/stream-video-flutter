// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CollectUserFeedbackRequest {
  const CollectUserFeedbackRequest({
    this.custom,
    required this.rating,
    this.reason,
    required this.sdk,
    required this.sdkVersion,
    this.userSessionId,
  });

  final Map<String, Object>? custom;

  final int rating;

  final String? reason;

  final String sdk;

  final String sdkVersion;

  final String? userSessionId;

  Map<String, dynamic> toJson() {
    return {
      'custom': custom,
      'rating': rating,
      'reason': reason,
      'sdk': sdk,
      'sdk_version': sdkVersion,
      'user_session_id': userSessionId,
    };
  }

  static CollectUserFeedbackRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CollectUserFeedbackRequest(
        custom: mapCastOfType<String, Object>(json, r'custom'),
        rating: mapValueOfType<int>(json, r'rating')!,
        reason: mapValueOfType<String>(json, r'reason', null),
        sdk: mapValueOfType<String>(json, r'sdk')!,
        sdkVersion: mapValueOfType<String>(json, r'sdk_version')!,
        userSessionId: mapValueOfType<String>(json, r'user_session_id', null),
      );
    }
    return null;
  }

  static List<CollectUserFeedbackRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CollectUserFeedbackRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CollectUserFeedbackRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CollectUserFeedbackRequest('
        'custom: $custom, '
        'rating: $rating, '
        'reason: $reason, '
        'sdk: $sdk, '
        'sdkVersion: $sdkVersion, '
        'userSessionId: $userSessionId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CollectUserFeedbackRequest &&
        other.custom == custom &&
        other.rating == rating &&
        other.reason == reason &&
        other.sdk == sdk &&
        other.sdkVersion == sdkVersion &&
        other.userSessionId == userSessionId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      custom,
      rating,
      reason,
      sdk,
      sdkVersion,
      userSessionId,
    ]);
  }
}
