// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class EdgeResponse {
  const EdgeResponse({
    required this.continentCode,
    required this.countryIsoCode,
    required this.green,
    required this.id,
    required this.latencyTestUrl,
    required this.latitude,
    required this.longitude,
    required this.red,
    required this.subdivisionIsoCode,
    required this.yellow,
  });

  final String continentCode;

  final String countryIsoCode;

  final int green;

  final String id;

  final String latencyTestUrl;

  final num latitude;

  final num longitude;

  final int red;

  final String subdivisionIsoCode;

  final int yellow;

  Map<String, dynamic> toJson() {
    return {
      'continent_code': continentCode,
      'country_iso_code': countryIsoCode,
      'green': green,
      'id': id,
      'latency_test_url': latencyTestUrl,
      'latitude': latitude,
      'longitude': longitude,
      'red': red,
      'subdivision_iso_code': subdivisionIsoCode,
      'yellow': yellow,
    };
  }

  static EdgeResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return EdgeResponse(
        continentCode: mapValueOfType<String>(json, r'continent_code')!,
        countryIsoCode: mapValueOfType<String>(json, r'country_iso_code')!,
        green: mapValueOfType<int>(json, r'green')!,
        id: mapValueOfType<String>(json, r'id')!,
        latencyTestUrl: mapValueOfType<String>(json, r'latency_test_url')!,
        latitude: mapValueOfType<num>(json, r'latitude')!,
        longitude: mapValueOfType<num>(json, r'longitude')!,
        red: mapValueOfType<int>(json, r'red')!,
        subdivisionIsoCode:
            mapValueOfType<String>(json, r'subdivision_iso_code')!,
        yellow: mapValueOfType<int>(json, r'yellow')!,
      );
    }
    return null;
  }

  static List<EdgeResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <EdgeResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = EdgeResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'EdgeResponse('
        'continentCode: $continentCode, '
        'countryIsoCode: $countryIsoCode, '
        'green: $green, '
        'id: $id, '
        'latencyTestUrl: $latencyTestUrl, '
        'latitude: $latitude, '
        'longitude: $longitude, '
        'red: $red, '
        'subdivisionIsoCode: $subdivisionIsoCode, '
        'yellow: $yellow, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is EdgeResponse &&
        other.continentCode == continentCode &&
        other.countryIsoCode == countryIsoCode &&
        other.green == green &&
        other.id == id &&
        other.latencyTestUrl == latencyTestUrl &&
        other.latitude == latitude &&
        other.longitude == longitude &&
        other.red == red &&
        other.subdivisionIsoCode == subdivisionIsoCode &&
        other.yellow == yellow;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      continentCode,
      countryIsoCode,
      green,
      id,
      latencyTestUrl,
      latitude,
      longitude,
      red,
      subdivisionIsoCode,
      yellow,
    ]);
  }
}
