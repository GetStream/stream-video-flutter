// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class GetOrCreateCallRequest {
  const GetOrCreateCallRequest({
    this.data,
    this.membersLimit,
    this.notify,
    this.ring,
    this.video,
  });

  final CallRequest? data;

  final int? membersLimit;

  final bool? notify;

  final bool? ring;

  final bool? video;

  Map<String, dynamic> toJson() {
    return {
      'data': data,
      'members_limit': membersLimit,
      'notify': notify,
      'ring': ring,
      'video': video,
    };
  }

  static GetOrCreateCallRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return GetOrCreateCallRequest(
        data: CallRequest.fromJson(json[r'data'] ?? null),
        membersLimit: mapValueOfType<int>(json, r'members_limit', null),
        notify: mapValueOfType<bool>(json, r'notify', null),
        ring: mapValueOfType<bool>(json, r'ring', null),
        video: mapValueOfType<bool>(json, r'video', null),
      );
    }
    return null;
  }

  static List<GetOrCreateCallRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <GetOrCreateCallRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = GetOrCreateCallRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'GetOrCreateCallRequest('
        'data: $data, '
        'membersLimit: $membersLimit, '
        'notify: $notify, '
        'ring: $ring, '
        'video: $video, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is GetOrCreateCallRequest &&
        other.data == data &&
        other.membersLimit == membersLimit &&
        other.notify == notify &&
        other.ring == ring &&
        other.video == video;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      data,
      membersLimit,
      notify,
      ring,
      video,
    ]);
  }
}
