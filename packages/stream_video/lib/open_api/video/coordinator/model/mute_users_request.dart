// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class MuteUsersRequest {
  const MuteUsersRequest({
    this.audio,
    this.muteAllUsers,
    this.screenshare,
    this.screenshareAudio,
    this.userIds,
    this.video,
  });

  final bool? audio;

  final bool? muteAllUsers;

  final bool? screenshare;

  final bool? screenshareAudio;

  final List<String>? userIds;

  final bool? video;

  Map<String, dynamic> toJson() {
    return {
      'audio': audio,
      'mute_all_users': muteAllUsers,
      'screenshare': screenshare,
      'screenshare_audio': screenshareAudio,
      'user_ids': userIds,
      'video': video,
    };
  }

  static MuteUsersRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return MuteUsersRequest(
        audio: mapValueOfType<bool>(json, r'audio', null),
        muteAllUsers: mapValueOfType<bool>(json, r'mute_all_users', null),
        screenshare: mapValueOfType<bool>(json, r'screenshare', null),
        screenshareAudio:
            mapValueOfType<bool>(json, r'screenshare_audio', null),
        userIds: json[r'user_ids'] is Iterable
            ? (json[r'user_ids'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        video: mapValueOfType<bool>(json, r'video', null),
      );
    }
    return null;
  }

  static List<MuteUsersRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <MuteUsersRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = MuteUsersRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'MuteUsersRequest('
        'audio: $audio, '
        'muteAllUsers: $muteAllUsers, '
        'screenshare: $screenshare, '
        'screenshareAudio: $screenshareAudio, '
        'userIds: $userIds, '
        'video: $video, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is MuteUsersRequest &&
        other.audio == audio &&
        other.muteAllUsers == muteAllUsers &&
        other.screenshare == screenshare &&
        other.screenshareAudio == screenshareAudio &&
        other.userIds == userIds &&
        other.video == video;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      audio,
      muteAllUsers,
      screenshare,
      screenshareAudio,
      userIds,
      video,
    ]);
  }
}
