// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class RingSettingsRequest {
  const RingSettingsRequest({
    required this.autoCancelTimeoutMs,
    required this.incomingCallTimeoutMs,
    this.missedCallTimeoutMs,
  });

  final int autoCancelTimeoutMs;

  final int incomingCallTimeoutMs;

  final int? missedCallTimeoutMs;

  Map<String, dynamic> toJson() {
    return {
      'auto_cancel_timeout_ms': autoCancelTimeoutMs,
      'incoming_call_timeout_ms': incomingCallTimeoutMs,
      'missed_call_timeout_ms': missedCallTimeoutMs,
    };
  }

  static RingSettingsRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RingSettingsRequest(
        autoCancelTimeoutMs:
            mapValueOfType<int>(json, r'auto_cancel_timeout_ms')!,
        incomingCallTimeoutMs:
            mapValueOfType<int>(json, r'incoming_call_timeout_ms')!,
        missedCallTimeoutMs:
            mapValueOfType<int>(json, r'missed_call_timeout_ms', null),
      );
    }
    return null;
  }

  static List<RingSettingsRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RingSettingsRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RingSettingsRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RingSettingsRequest('
        'autoCancelTimeoutMs: $autoCancelTimeoutMs, '
        'incomingCallTimeoutMs: $incomingCallTimeoutMs, '
        'missedCallTimeoutMs: $missedCallTimeoutMs, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RingSettingsRequest &&
        other.autoCancelTimeoutMs == autoCancelTimeoutMs &&
        other.incomingCallTimeoutMs == incomingCallTimeoutMs &&
        other.missedCallTimeoutMs == missedCallTimeoutMs;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      autoCancelTimeoutMs,
      incomingCallTimeoutMs,
      missedCallTimeoutMs,
    ]);
  }
}
