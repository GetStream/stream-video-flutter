// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CallReportResponse {
  const CallReportResponse({
    this.endedAt,
    required this.score,
    this.startedAt,
  });

  final DateTime? endedAt;

  final num score;

  final DateTime? startedAt;

  Map<String, dynamic> toJson() {
    return {
      'ended_at': endedAt,
      'score': score,
      'started_at': startedAt,
    };
  }

  static CallReportResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallReportResponse(
        endedAt: mapValueOfType<DateTime>(json, r'ended_at', null),
        score: mapValueOfType<num>(json, r'score')!,
        startedAt: mapValueOfType<DateTime>(json, r'started_at', null),
      );
    }
    return null;
  }

  static List<CallReportResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallReportResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallReportResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallReportResponse('
        'endedAt: $endedAt, '
        'score: $score, '
        'startedAt: $startedAt, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallReportResponse &&
        other.endedAt == endedAt &&
        other.score == score &&
        other.startedAt == startedAt;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      endedAt,
      score,
      startedAt,
    ]);
  }
}
