// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class UserBannedEvent {
  const UserBannedEvent({
    required this.channelId,
    required this.channelType,
    required this.cid,
    required this.createdAt,
    required this.createdBy,
    this.expiration,
    this.reason,
    required this.shadow,
    this.team,
    required this.type,
    this.user,
  });

  final String channelId;

  final String channelType;

  final String cid;

  final DateTime createdAt;

  final User createdBy;

  final DateTime? expiration;

  final String? reason;

  final bool shadow;

  final String? team;

  final String type;

  final User? user;

  Map<String, dynamic> toJson() {
    return {
      'channel_id': channelId,
      'channel_type': channelType,
      'cid': cid,
      'created_at': createdAt,
      'created_by': createdBy,
      'expiration': expiration,
      'reason': reason,
      'shadow': shadow,
      'team': team,
      'type': type,
      'user': user,
    };
  }

  static UserBannedEvent? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UserBannedEvent(
        channelId: mapValueOfType<String>(json, r'channel_id')!,
        channelType: mapValueOfType<String>(json, r'channel_type')!,
        cid: mapValueOfType<String>(json, r'cid')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        createdBy: User.fromJson(json[r'created_by'])!,
        expiration: mapValueOfType<DateTime>(json, r'expiration', null),
        reason: mapValueOfType<String>(json, r'reason', null),
        shadow: mapValueOfType<bool>(json, r'shadow')!,
        team: mapValueOfType<String>(json, r'team', null),
        type: mapValueOfType<String>(json, r'type', "user.banned")!,
        user: User.fromJson(json[r'user'] ?? null),
      );
    }
    return null;
  }

  static List<UserBannedEvent> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UserBannedEvent>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UserBannedEvent.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UserBannedEvent('
        'channelId: $channelId, '
        'channelType: $channelType, '
        'cid: $cid, '
        'createdAt: $createdAt, '
        'createdBy: $createdBy, '
        'expiration: $expiration, '
        'reason: $reason, '
        'shadow: $shadow, '
        'team: $team, '
        'type: $type, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UserBannedEvent &&
        other.channelId == channelId &&
        other.channelType == channelType &&
        other.cid == cid &&
        other.createdAt == createdAt &&
        other.createdBy == createdBy &&
        other.expiration == expiration &&
        other.reason == reason &&
        other.shadow == shadow &&
        other.team == team &&
        other.type == type &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      channelId,
      channelType,
      cid,
      createdAt,
      createdBy,
      expiration,
      reason,
      shadow,
      team,
      type,
      user,
    ]);
  }
}
