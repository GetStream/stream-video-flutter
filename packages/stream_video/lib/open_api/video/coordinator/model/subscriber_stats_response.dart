// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class SubscriberStatsResponse {
  const SubscriberStatsResponse({
    required this.total,
    required this.totalSubscribedDurationSeconds,
    required this.unique,
  });

  final int total;

  final int totalSubscribedDurationSeconds;

  final int unique;

  Map<String, dynamic> toJson() {
    return {
      'total': total,
      'total_subscribed_duration_seconds': totalSubscribedDurationSeconds,
      'unique': unique,
    };
  }

  static SubscriberStatsResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return SubscriberStatsResponse(
        total: mapValueOfType<int>(json, r'total')!,
        totalSubscribedDurationSeconds:
            mapValueOfType<int>(json, r'total_subscribed_duration_seconds')!,
        unique: mapValueOfType<int>(json, r'unique')!,
      );
    }
    return null;
  }

  static List<SubscriberStatsResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <SubscriberStatsResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = SubscriberStatsResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'SubscriberStatsResponse('
        'total: $total, '
        'totalSubscribedDurationSeconds: $totalSubscribedDurationSeconds, '
        'unique: $unique, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is SubscriberStatsResponse &&
        other.total == total &&
        other.totalSubscribedDurationSeconds ==
            totalSubscribedDurationSeconds &&
        other.unique == unique;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      total,
      totalSubscribedDurationSeconds,
      unique,
    ]);
  }
}
