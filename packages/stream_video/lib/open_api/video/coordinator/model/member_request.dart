// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class MemberRequest {
  const MemberRequest({
    this.custom,
    this.role,
    required this.userId,
  });

  final Map<String, Object>? custom;

  final String? role;

  final String userId;

  Map<String, dynamic> toJson() {
    return {
      'custom': custom,
      'role': role,
      'user_id': userId,
    };
  }

  static MemberRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return MemberRequest(
        custom: mapCastOfType<String, Object>(json, r'custom'),
        role: mapValueOfType<String>(json, r'role', null),
        userId: mapValueOfType<String>(json, r'user_id')!,
      );
    }
    return null;
  }

  static List<MemberRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <MemberRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = MemberRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'MemberRequest('
        'custom: $custom, '
        'role: $role, '
        'userId: $userId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is MemberRequest &&
        other.custom == custom &&
        other.role == role &&
        other.userId == userId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      custom,
      role,
      userId,
    ]);
  }
}
