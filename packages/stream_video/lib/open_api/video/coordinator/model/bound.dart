// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class Bound {
  const Bound({
    required this.inclusive,
    required this.value,
  });

  final bool inclusive;

  final num value;

  Map<String, dynamic> toJson() {
    return {
      'inclusive': inclusive,
      'value': value,
    };
  }

  static Bound? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return Bound(
        inclusive: mapValueOfType<bool>(json, r'inclusive')!,
        value: mapValueOfType<num>(json, r'value')!,
      );
    }
    return null;
  }

  static List<Bound> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <Bound>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = Bound.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'Bound('
        'inclusive: $inclusive, '
        'value: $value, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Bound &&
        other.inclusive == inclusive &&
        other.value == value;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      inclusive,
      value,
    ]);
  }
}
