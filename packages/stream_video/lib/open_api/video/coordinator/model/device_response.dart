// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class DeviceResponse {
  const DeviceResponse({
    required this.createdAt,
    this.disabled,
    this.disabledReason,
    required this.id,
    required this.pushProvider,
    this.pushProviderName,
    required this.userId,
    this.voip,
  });

  final DateTime createdAt;

  final bool? disabled;

  final String? disabledReason;

  final String id;

  final String pushProvider;

  final String? pushProviderName;

  final String userId;

  final bool? voip;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'disabled': disabled,
      'disabled_reason': disabledReason,
      'id': id,
      'push_provider': pushProvider,
      'push_provider_name': pushProviderName,
      'user_id': userId,
      'voip': voip,
    };
  }

  static DeviceResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return DeviceResponse(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        disabled: mapValueOfType<bool?>(json, r'disabled', null),
        disabledReason: mapValueOfType<String?>(json, r'disabled_reason', null),
        id: mapValueOfType<String>(json, r'id')!,
        pushProvider: mapValueOfType<String>(json, r'push_provider')!,
        pushProviderName:
            mapValueOfType<String?>(json, r'push_provider_name', null),
        userId: mapValueOfType<String>(json, r'user_id')!,
        voip: mapValueOfType<bool?>(json, r'voip', null),
      );
    }
    return null;
  }

  static List<DeviceResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <DeviceResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = DeviceResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'DeviceResponse('
        'createdAt: $createdAt, '
        'disabled: $disabled, '
        'disabledReason: $disabledReason, '
        'id: $id, '
        'pushProvider: $pushProvider, '
        'pushProviderName: $pushProviderName, '
        'userId: $userId, '
        'voip: $voip, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is DeviceResponse &&
        other.createdAt == createdAt &&
        other.disabled == disabled &&
        other.disabledReason == disabledReason &&
        other.id == id &&
        other.pushProvider == pushProvider &&
        other.pushProviderName == pushProviderName &&
        other.userId == userId &&
        other.voip == voip;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      disabled,
      disabledReason,
      id,
      pushProvider,
      pushProviderName,
      userId,
      voip,
    ]);
  }
}
