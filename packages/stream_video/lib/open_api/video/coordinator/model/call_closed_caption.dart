// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CallClosedCaption {
  const CallClosedCaption({
    required this.endTime,
    required this.speakerId,
    required this.startTime,
    required this.text,
    required this.user,
  });

  final DateTime endTime;

  final String speakerId;

  final DateTime startTime;

  final String text;

  final UserResponse user;

  Map<String, dynamic> toJson() {
    return {
      'end_time': endTime,
      'speaker_id': speakerId,
      'start_time': startTime,
      'text': text,
      'user': user,
    };
  }

  static CallClosedCaption? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallClosedCaption(
        endTime: mapValueOfType<DateTime>(json, r'end_time')!,
        speakerId: mapValueOfType<String>(json, r'speaker_id')!,
        startTime: mapValueOfType<DateTime>(json, r'start_time')!,
        text: mapValueOfType<String>(json, r'text')!,
        user: UserResponse.fromJson(json[r'user'])!,
      );
    }
    return null;
  }

  static List<CallClosedCaption> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallClosedCaption>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallClosedCaption.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallClosedCaption('
        'endTime: $endTime, '
        'speakerId: $speakerId, '
        'startTime: $startTime, '
        'text: $text, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallClosedCaption &&
        other.endTime == endTime &&
        other.speakerId == speakerId &&
        other.startTime == startTime &&
        other.text == text &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      endTime,
      speakerId,
      startTime,
      text,
      user,
    ]);
  }
}
