// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

enum NoiseCancellationSettingsModeEnum {
  autoOn('auto-on'),
  available('available'),
  disabled('disabled'),
  unknown('_unknown');

  const NoiseCancellationSettingsModeEnum(this.value);
  final String value;

  static NoiseCancellationSettingsModeEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case 'auto-on':
        return NoiseCancellationSettingsModeEnum.autoOn;
      case 'available':
        return NoiseCancellationSettingsModeEnum.available;
      case 'disabled':
        return NoiseCancellationSettingsModeEnum.disabled;
      default:
        return NoiseCancellationSettingsModeEnum.unknown;
    }
  }
}

@immutable
class NoiseCancellationSettings {
  const NoiseCancellationSettings({
    required this.mode,
  });

  final NoiseCancellationSettingsModeEnum mode;

  Map<String, dynamic> toJson() {
    return {
      'mode': mode,
    };
  }

  static NoiseCancellationSettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return NoiseCancellationSettings(
        mode: NoiseCancellationSettingsModeEnum.fromValue(json['mode'])!,
      );
    }
    return null;
  }

  static List<NoiseCancellationSettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <NoiseCancellationSettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = NoiseCancellationSettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'NoiseCancellationSettings('
        'mode: $mode, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is NoiseCancellationSettings && other.mode == mode;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      mode,
    ]);
  }
}
