// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class ParticipantCountByMinuteResponse {
  const ParticipantCountByMinuteResponse({
    required this.first,
    required this.last,
    required this.max,
    required this.min,
    required this.startTs,
  });

  final int first;

  final int last;

  final int max;

  final int min;

  final DateTime startTs;

  Map<String, dynamic> toJson() {
    return {
      'first': first,
      'last': last,
      'max': max,
      'min': min,
      'start_ts': startTs,
    };
  }

  static ParticipantCountByMinuteResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ParticipantCountByMinuteResponse(
        first: mapValueOfType<int>(json, r'first')!,
        last: mapValueOfType<int>(json, r'last')!,
        max: mapValueOfType<int>(json, r'max')!,
        min: mapValueOfType<int>(json, r'min')!,
        startTs: mapValueOfType<DateTime>(json, r'start_ts')!,
      );
    }
    return null;
  }

  static List<ParticipantCountByMinuteResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ParticipantCountByMinuteResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ParticipantCountByMinuteResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ParticipantCountByMinuteResponse('
        'first: $first, '
        'last: $last, '
        'max: $max, '
        'min: $min, '
        'startTs: $startTs, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ParticipantCountByMinuteResponse &&
        other.first == first &&
        other.last == last &&
        other.max == max &&
        other.min == min &&
        other.startTs == startTs;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      first,
      last,
      max,
      min,
      startTs,
    ]);
  }
}
