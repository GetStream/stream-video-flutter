// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class UserMutedEvent {
  const UserMutedEvent({
    required this.createdAt,
    this.targetUser,
    this.targetUsers,
    required this.type,
    this.user,
  });

  final DateTime createdAt;

  final String? targetUser;

  final List<String>? targetUsers;

  final String type;

  final User? user;

  Map<String, dynamic> toJson() {
    return {
      'created_at': createdAt,
      'target_user': targetUser,
      'target_users': targetUsers,
      'type': type,
      'user': user,
    };
  }

  static UserMutedEvent? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return UserMutedEvent(
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        targetUser: mapValueOfType<String>(json, r'target_user', null),
        targetUsers: json[r'target_users'] is Iterable
            ? (json[r'target_users'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const [],
        type: mapValueOfType<String>(json, r'type', "user.muted")!,
        user: User.fromJson(json[r'user'] ?? null),
      );
    }
    return null;
  }

  static List<UserMutedEvent> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <UserMutedEvent>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UserMutedEvent.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'UserMutedEvent('
        'createdAt: $createdAt, '
        'targetUser: $targetUser, '
        'targetUsers: $targetUsers, '
        'type: $type, '
        'user: $user, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is UserMutedEvent &&
        other.createdAt == createdAt &&
        other.targetUser == targetUser &&
        other.targetUsers == targetUsers &&
        other.type == type &&
        other.user == user;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      createdAt,
      targetUser,
      targetUsers,
      type,
      user,
    ]);
  }
}
