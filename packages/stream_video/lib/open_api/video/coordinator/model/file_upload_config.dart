// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class FileUploadConfig {
  const FileUploadConfig({
    required this.allowedFileExtensions,
    required this.allowedMimeTypes,
    required this.blockedFileExtensions,
    required this.blockedMimeTypes,
    required this.sizeLimit,
  });

  final List<String> allowedFileExtensions;

  final List<String> allowedMimeTypes;

  final List<String> blockedFileExtensions;

  final List<String> blockedMimeTypes;

  final int sizeLimit;

  Map<String, dynamic> toJson() {
    return {
      'allowed_file_extensions': allowedFileExtensions,
      'allowed_mime_types': allowedMimeTypes,
      'blocked_file_extensions': blockedFileExtensions,
      'blocked_mime_types': blockedMimeTypes,
      'size_limit': sizeLimit,
    };
  }

  static FileUploadConfig? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return FileUploadConfig(
        allowedFileExtensions: json[r'allowed_file_extensions'] is Iterable
            ? (json[r'allowed_file_extensions'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const []!,
        allowedMimeTypes: json[r'allowed_mime_types'] is Iterable
            ? (json[r'allowed_mime_types'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const []!,
        blockedFileExtensions: json[r'blocked_file_extensions'] is Iterable
            ? (json[r'blocked_file_extensions'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const []!,
        blockedMimeTypes: json[r'blocked_mime_types'] is Iterable
            ? (json[r'blocked_mime_types'] as Iterable)
                .cast<String>()
                .toList(growable: false)
            : const []!,
        sizeLimit: mapValueOfType<int>(json, r'size_limit')!,
      );
    }
    return null;
  }

  static List<FileUploadConfig> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <FileUploadConfig>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = FileUploadConfig.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'FileUploadConfig('
        'allowedFileExtensions: $allowedFileExtensions, '
        'allowedMimeTypes: $allowedMimeTypes, '
        'blockedFileExtensions: $blockedFileExtensions, '
        'blockedMimeTypes: $blockedMimeTypes, '
        'sizeLimit: $sizeLimit, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is FileUploadConfig &&
        other.allowedFileExtensions == allowedFileExtensions &&
        other.allowedMimeTypes == allowedMimeTypes &&
        other.blockedFileExtensions == blockedFileExtensions &&
        other.blockedMimeTypes == blockedMimeTypes &&
        other.sizeLimit == sizeLimit;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      allowedFileExtensions,
      allowedMimeTypes,
      blockedFileExtensions,
      blockedMimeTypes,
      sizeLimit,
    ]);
  }
}
