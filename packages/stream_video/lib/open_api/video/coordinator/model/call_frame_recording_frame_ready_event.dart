// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CallFrameRecordingFrameReadyEvent {
  const CallFrameRecordingFrameReadyEvent({
    required this.callCid,
    required this.capturedAt,
    required this.createdAt,
    required this.egressId,
    required this.sessionId,
    required this.trackType,
    required this.type,
    required this.url,
    required this.users,
  });

  final String callCid;

  final DateTime capturedAt;

  final DateTime createdAt;

  final String egressId;

  final String sessionId;

  final String trackType;

  final String type;

  final String url;

  final Map<String, UserResponse> users;

  Map<String, dynamic> toJson() {
    return {
      'call_cid': callCid,
      'captured_at': capturedAt,
      'created_at': createdAt,
      'egress_id': egressId,
      'session_id': sessionId,
      'track_type': trackType,
      'type': type,
      'url': url,
      'users': users,
    };
  }

  static CallFrameRecordingFrameReadyEvent? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallFrameRecordingFrameReadyEvent(
        callCid: mapValueOfType<String>(json, r'call_cid')!,
        capturedAt: mapValueOfType<DateTime>(json, r'captured_at')!,
        createdAt: mapValueOfType<DateTime>(json, r'created_at')!,
        egressId: mapValueOfType<String>(json, r'egress_id')!,
        sessionId: mapValueOfType<String>(json, r'session_id')!,
        trackType: mapValueOfType<String>(json, r'track_type')!,
        type: mapValueOfType<String>(
            json, r'type', "call.frame_recording_ready")!,
        url: mapValueOfType<String>(json, r'url')!,
        users: mapCastOfType<String, UserResponse>(json, r'users')!,
      );
    }
    return null;
  }

  static List<CallFrameRecordingFrameReadyEvent> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallFrameRecordingFrameReadyEvent>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallFrameRecordingFrameReadyEvent.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallFrameRecordingFrameReadyEvent('
        'callCid: $callCid, '
        'capturedAt: $capturedAt, '
        'createdAt: $createdAt, '
        'egressId: $egressId, '
        'sessionId: $sessionId, '
        'trackType: $trackType, '
        'type: $type, '
        'url: $url, '
        'users: $users, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallFrameRecordingFrameReadyEvent &&
        other.callCid == callCid &&
        other.capturedAt == capturedAt &&
        other.createdAt == createdAt &&
        other.egressId == egressId &&
        other.sessionId == sessionId &&
        other.trackType == trackType &&
        other.type == type &&
        other.url == url &&
        other.users == users;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      callCid,
      capturedAt,
      createdAt,
      egressId,
      sessionId,
      trackType,
      type,
      url,
      users,
    ]);
  }
}
