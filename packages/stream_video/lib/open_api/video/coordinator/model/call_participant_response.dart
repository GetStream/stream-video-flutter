// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CallParticipantResponse {
  const CallParticipantResponse({
    required this.joinedAt,
    required this.role,
    required this.user,
    required this.userSessionId,
  });

  final DateTime joinedAt;

  final String role;

  final UserResponse user;

  final String userSessionId;

  Map<String, dynamic> toJson() {
    return {
      'joined_at': joinedAt,
      'role': role,
      'user': user,
      'user_session_id': userSessionId,
    };
  }

  static CallParticipantResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallParticipantResponse(
        joinedAt: mapValueOfType<DateTime>(json, r'joined_at')!,
        role: mapValueOfType<String>(json, r'role')!,
        user: UserResponse.fromJson(json[r'user'])!,
        userSessionId: mapValueOfType<String>(json, r'user_session_id')!,
      );
    }
    return null;
  }

  static List<CallParticipantResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallParticipantResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallParticipantResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallParticipantResponse('
        'joinedAt: $joinedAt, '
        'role: $role, '
        'user: $user, '
        'userSessionId: $userSessionId, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallParticipantResponse &&
        other.joinedAt == joinedAt &&
        other.role == role &&
        other.user == user &&
        other.userSessionId == userSessionId;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      joinedAt,
      role,
      user,
      userSessionId,
    ]);
  }
}
