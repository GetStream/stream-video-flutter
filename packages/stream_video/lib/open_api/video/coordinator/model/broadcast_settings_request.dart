// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class BroadcastSettingsRequest {
  const BroadcastSettingsRequest({
    this.enabled,
    this.hls,
    this.rtmp,
  });

  final bool? enabled;

  final HLSSettingsRequest? hls;

  final RTMPSettingsRequest? rtmp;

  Map<String, dynamic> toJson() {
    return {
      'enabled': enabled,
      'hls': hls,
      'rtmp': rtmp,
    };
  }

  static BroadcastSettingsRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return BroadcastSettingsRequest(
        enabled: mapValueOfType<bool?>(json, r'enabled', null),
        hls: HLSSettingsRequest?.fromJson(json[r'hls'] ?? null),
        rtmp: RTMPSettingsRequest?.fromJson(json[r'rtmp'] ?? null),
      );
    }
    return null;
  }

  static List<BroadcastSettingsRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <BroadcastSettingsRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = BroadcastSettingsRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'BroadcastSettingsRequest('
        'enabled: $enabled, '
        'hls: $hls, '
        'rtmp: $rtmp, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BroadcastSettingsRequest &&
        other.enabled == enabled &&
        other.hls == hls &&
        other.rtmp == rtmp;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      enabled,
      hls,
      rtmp,
    ]);
  }
}
