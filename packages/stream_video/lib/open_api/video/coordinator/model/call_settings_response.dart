// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CallSettingsResponse {
  const CallSettingsResponse({
    required this.audio,
    required this.backstage,
    required this.broadcasting,
    required this.frameRecording,
    required this.geofencing,
    required this.limits,
    required this.recording,
    required this.ring,
    required this.screensharing,
    required this.session,
    required this.thumbnails,
    required this.transcription,
    required this.video,
  });

  final AudioSettingsResponse audio;

  final BackstageSettingsResponse backstage;

  final BroadcastSettingsResponse broadcasting;

  final FrameRecordingSettingsResponse frameRecording;

  final GeofenceSettingsResponse geofencing;

  final LimitsSettingsResponse limits;

  final RecordSettingsResponse recording;

  final RingSettingsResponse ring;

  final ScreensharingSettingsResponse screensharing;

  final SessionSettingsResponse session;

  final ThumbnailsSettingsResponse thumbnails;

  final TranscriptionSettingsResponse transcription;

  final VideoSettingsResponse video;

  Map<String, dynamic> toJson() {
    return {
      'audio': audio,
      'backstage': backstage,
      'broadcasting': broadcasting,
      'frame_recording': frameRecording,
      'geofencing': geofencing,
      'limits': limits,
      'recording': recording,
      'ring': ring,
      'screensharing': screensharing,
      'session': session,
      'thumbnails': thumbnails,
      'transcription': transcription,
      'video': video,
    };
  }

  static CallSettingsResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallSettingsResponse(
        audio: AudioSettingsResponse.fromJson(json[r'audio'])!,
        backstage: BackstageSettingsResponse.fromJson(json[r'backstage'])!,
        broadcasting:
            BroadcastSettingsResponse.fromJson(json[r'broadcasting'])!,
        frameRecording:
            FrameRecordingSettingsResponse.fromJson(json[r'frame_recording'])!,
        geofencing: GeofenceSettingsResponse.fromJson(json[r'geofencing'])!,
        limits: LimitsSettingsResponse.fromJson(json[r'limits'])!,
        recording: RecordSettingsResponse.fromJson(json[r'recording'])!,
        ring: RingSettingsResponse.fromJson(json[r'ring'])!,
        screensharing:
            ScreensharingSettingsResponse.fromJson(json[r'screensharing'])!,
        session: SessionSettingsResponse.fromJson(json[r'session'])!,
        thumbnails: ThumbnailsSettingsResponse.fromJson(json[r'thumbnails'])!,
        transcription:
            TranscriptionSettingsResponse.fromJson(json[r'transcription'])!,
        video: VideoSettingsResponse.fromJson(json[r'video'])!,
      );
    }
    return null;
  }

  static List<CallSettingsResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallSettingsResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallSettingsResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallSettingsResponse('
        'audio: $audio, '
        'backstage: $backstage, '
        'broadcasting: $broadcasting, '
        'frameRecording: $frameRecording, '
        'geofencing: $geofencing, '
        'limits: $limits, '
        'recording: $recording, '
        'ring: $ring, '
        'screensharing: $screensharing, '
        'session: $session, '
        'thumbnails: $thumbnails, '
        'transcription: $transcription, '
        'video: $video, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallSettingsResponse &&
        other.audio == audio &&
        other.backstage == backstage &&
        other.broadcasting == broadcasting &&
        other.frameRecording == frameRecording &&
        other.geofencing == geofencing &&
        other.limits == limits &&
        other.recording == recording &&
        other.ring == ring &&
        other.screensharing == screensharing &&
        other.session == session &&
        other.thumbnails == thumbnails &&
        other.transcription == transcription &&
        other.video == video;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      audio,
      backstage,
      broadcasting,
      frameRecording,
      geofencing,
      limits,
      recording,
      ring,
      screensharing,
      session,
      thumbnails,
      transcription,
      video,
    ]);
  }
}
