// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class GoLiveRequest {
  const GoLiveRequest({
    this.recordingStorageName,
    this.startClosedCaption,
    this.startHls,
    this.startRecording,
    this.startTranscription,
    this.transcriptionStorageName,
  });

  final String? recordingStorageName;

  final bool? startClosedCaption;

  final bool? startHls;

  final bool? startRecording;

  final bool? startTranscription;

  final String? transcriptionStorageName;

  Map<String, dynamic> toJson() {
    return {
      'recording_storage_name': recordingStorageName,
      'start_closed_caption': startClosedCaption,
      'start_hls': startHls,
      'start_recording': startRecording,
      'start_transcription': startTranscription,
      'transcription_storage_name': transcriptionStorageName,
    };
  }

  static GoLiveRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return GoLiveRequest(
        recordingStorageName:
            mapValueOfType<String>(json, r'recording_storage_name', null),
        startClosedCaption:
            mapValueOfType<bool>(json, r'start_closed_caption', null),
        startHls: mapValueOfType<bool>(json, r'start_hls', null),
        startRecording: mapValueOfType<bool>(json, r'start_recording', null),
        startTranscription:
            mapValueOfType<bool>(json, r'start_transcription', null),
        transcriptionStorageName:
            mapValueOfType<String>(json, r'transcription_storage_name', null),
      );
    }
    return null;
  }

  static List<GoLiveRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <GoLiveRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = GoLiveRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'GoLiveRequest('
        'recordingStorageName: $recordingStorageName, '
        'startClosedCaption: $startClosedCaption, '
        'startHls: $startHls, '
        'startRecording: $startRecording, '
        'startTranscription: $startTranscription, '
        'transcriptionStorageName: $transcriptionStorageName, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is GoLiveRequest &&
        other.recordingStorageName == recordingStorageName &&
        other.startClosedCaption == startClosedCaption &&
        other.startHls == startHls &&
        other.startRecording == startRecording &&
        other.startTranscription == startTranscription &&
        other.transcriptionStorageName == transcriptionStorageName;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      recordingStorageName,
      startClosedCaption,
      startHls,
      startRecording,
      startTranscription,
      transcriptionStorageName,
    ]);
  }
}
