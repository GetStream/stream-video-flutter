// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class CallRecording {
  const CallRecording({
    required this.endTime,
    required this.filename,
    required this.sessionId,
    required this.startTime,
    required this.url,
  });

  final DateTime endTime;

  final String filename;

  final String sessionId;

  final DateTime startTime;

  final String url;

  Map<String, dynamic> toJson() {
    return {
      'end_time': endTime,
      'filename': filename,
      'session_id': sessionId,
      'start_time': startTime,
      'url': url,
    };
  }

  static CallRecording? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return CallRecording(
        endTime: mapValueOfType<DateTime>(json, r'end_time')!,
        filename: mapValueOfType<String>(json, r'filename')!,
        sessionId: mapValueOfType<String>(json, r'session_id')!,
        startTime: mapValueOfType<DateTime>(json, r'start_time')!,
        url: mapValueOfType<String>(json, r'url')!,
      );
    }
    return null;
  }

  static List<CallRecording> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <CallRecording>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CallRecording.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'CallRecording('
        'endTime: $endTime, '
        'filename: $filename, '
        'sessionId: $sessionId, '
        'startTime: $startTime, '
        'url: $url, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is CallRecording &&
        other.endTime == endTime &&
        other.filename == filename &&
        other.sessionId == sessionId &&
        other.startTime == startTime &&
        other.url == url;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      endTime,
      filename,
      sessionId,
      startTime,
      url,
    ]);
  }
}
