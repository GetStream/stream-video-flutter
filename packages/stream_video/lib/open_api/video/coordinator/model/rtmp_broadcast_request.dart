// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

enum RTMPBroadcastRequestQualityEnum {
  n1080p('1080p'),
  n1440p('1440p'),
  n360p('360p'),
  n480p('480p'),
  n720p('720p'),
  portrait1080x1920('portrait-1080x1920'),
  portrait1440x2560('portrait-1440x2560'),
  portrait360x640('portrait-360x640'),
  portrait480x854('portrait-480x854'),
  portrait720x1280('portrait-720x1280'),
  unknown('_unknown');

  const RTMPBroadcastRequestQualityEnum(this.value);
  final String value;

  static RTMPBroadcastRequestQualityEnum? fromValue(String? json) {
    switch (json) {
      case null:
        return null;
      case '1080p':
        return RTMPBroadcastRequestQualityEnum.n1080p;
      case '1440p':
        return RTMPBroadcastRequestQualityEnum.n1440p;
      case '360p':
        return RTMPBroadcastRequestQualityEnum.n360p;
      case '480p':
        return RTMPBroadcastRequestQualityEnum.n480p;
      case '720p':
        return RTMPBroadcastRequestQualityEnum.n720p;
      case 'portrait-1080x1920':
        return RTMPBroadcastRequestQualityEnum.portrait1080x1920;
      case 'portrait-1440x2560':
        return RTMPBroadcastRequestQualityEnum.portrait1440x2560;
      case 'portrait-360x640':
        return RTMPBroadcastRequestQualityEnum.portrait360x640;
      case 'portrait-480x854':
        return RTMPBroadcastRequestQualityEnum.portrait480x854;
      case 'portrait-720x1280':
        return RTMPBroadcastRequestQualityEnum.portrait720x1280;
      default:
        return RTMPBroadcastRequestQualityEnum.unknown;
    }
  }
}

@immutable
class RTMPBroadcastRequest {
  const RTMPBroadcastRequest({
    this.layout,
    required this.name,
    this.quality,
    this.streamKey,
    required this.streamUrl,
  });

  final LayoutSettingsRequest? layout;

  final String name;

  final RTMPBroadcastRequestQualityEnum? quality;

  final String? streamKey;

  final String streamUrl;

  Map<String, dynamic> toJson() {
    return {
      'layout': layout,
      'name': name,
      'quality': quality,
      'stream_key': streamKey,
      'stream_url': streamUrl,
    };
  }

  static RTMPBroadcastRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return RTMPBroadcastRequest(
        layout: LayoutSettingsRequest?.fromJson(json[r'layout'] ?? null),
        name: mapValueOfType<String>(json, r'name')!,
        quality: RTMPBroadcastRequestQualityEnum.fromValue(json['quality']),
        streamKey: mapValueOfType<String?>(json, r'stream_key', null),
        streamUrl: mapValueOfType<String>(json, r'stream_url')!,
      );
    }
    return null;
  }

  static List<RTMPBroadcastRequest> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <RTMPBroadcastRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = RTMPBroadcastRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'RTMPBroadcastRequest('
        'layout: $layout, '
        'name: $name, '
        'quality: $quality, '
        'streamKey: $streamKey, '
        'streamUrl: $streamUrl, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RTMPBroadcastRequest &&
        other.layout == layout &&
        other.name == name &&
        other.quality == quality &&
        other.streamKey == streamKey &&
        other.streamUrl == streamUrl;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      layout,
      name,
      quality,
      streamKey,
      streamUrl,
    ]);
  }
}
