// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class ReportByHistogramBucket {
  const ReportByHistogramBucket({
    required this.category,
    required this.count,
    this.lowerBound,
    required this.sum,
    this.upperBound,
  });

  final String category;

  final int count;

  final Bound? lowerBound;

  final num sum;

  final Bound? upperBound;

  Map<String, dynamic> toJson() {
    return {
      'category': category,
      'count': count,
      'lower_bound': lowerBound,
      'sum': sum,
      'upper_bound': upperBound,
    };
  }

  static ReportByHistogramBucket? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ReportByHistogramBucket(
        category: mapValueOfType<String>(json, r'category')!,
        count: mapValueOfType<int>(json, r'count')!,
        lowerBound: Bound.fromJson(json[r'lower_bound'] ?? null),
        sum: mapValueOfType<num>(json, r'sum')!,
        upperBound: Bound.fromJson(json[r'upper_bound'] ?? null),
      );
    }
    return null;
  }

  static List<ReportByHistogramBucket> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ReportByHistogramBucket>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ReportByHistogramBucket.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ReportByHistogramBucket('
        'category: $category, '
        'count: $count, '
        'lowerBound: $lowerBound, '
        'sum: $sum, '
        'upperBound: $upperBound, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ReportByHistogramBucket &&
        other.category == category &&
        other.count == count &&
        other.lowerBound == lowerBound &&
        other.sum == sum &&
        other.upperBound == upperBound;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      category,
      count,
      lowerBound,
      sum,
      upperBound,
    ]);
  }
}
