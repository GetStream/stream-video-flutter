// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class PrivacySettings {
  const PrivacySettings({
    this.readReceipts,
    this.typingIndicators,
  });

  final ReadReceipts? readReceipts;

  final TypingIndicators? typingIndicators;

  Map<String, dynamic> toJson() {
    return {
      'read_receipts': readReceipts,
      'typing_indicators': typingIndicators,
    };
  }

  static PrivacySettings? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return PrivacySettings(
        readReceipts: ReadReceipts?.fromJson(json[r'read_receipts'] ?? null),
        typingIndicators:
            TypingIndicators?.fromJson(json[r'typing_indicators'] ?? null),
      );
    }
    return null;
  }

  static List<PrivacySettings> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <PrivacySettings>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = PrivacySettings.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'PrivacySettings('
        'readReceipts: $readReceipts, '
        'typingIndicators: $typingIndicators, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is PrivacySettings &&
        other.readReceipts == readReceipts &&
        other.typingIndicators == typingIndicators;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      readReceipts,
      typingIndicators,
    ]);
  }
}
