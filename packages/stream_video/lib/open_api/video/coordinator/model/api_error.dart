// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class APIError {
  const APIError({
    required this.code,
    required this.details,
    required this.duration,
    this.exceptionFields,
    required this.message,
    required this.moreInfo,
    required this.statusCode,
    this.unrecoverable,
  });

  final int code;

  final List<int> details;

  final String duration;

  final Map<String, String>? exceptionFields;

  final String message;

  final String moreInfo;

  final int statusCode;

  final bool? unrecoverable;

  Map<String, dynamic> toJson() {
    return {
      'code': code,
      'details': details,
      'duration': duration,
      'exception_fields': exceptionFields,
      'message': message,
      'more_info': moreInfo,
      'StatusCode': statusCode,
      'unrecoverable': unrecoverable,
    };
  }

  static APIError? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return APIError(
        code: mapValueOfType<int>(json, r'code')!,
        details: json[r'details'] is Iterable
            ? (json[r'details'] as Iterable).cast<int>().toList(growable: false)
            : const []!,
        duration: mapValueOfType<String>(json, r'duration')!,
        exceptionFields:
            mapCastOfType<String, String>(json, r'exception_fields'),
        message: mapValueOfType<String>(json, r'message')!,
        moreInfo: mapValueOfType<String>(json, r'more_info')!,
        statusCode: mapValueOfType<int>(json, r'StatusCode')!,
        unrecoverable: mapValueOfType<bool>(json, r'unrecoverable', null),
      );
    }
    return null;
  }

  static List<APIError> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <APIError>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = APIError.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'APIError('
        'code: $code, '
        'details: $details, '
        'duration: $duration, '
        'exceptionFields: $exceptionFields, '
        'message: $message, '
        'moreInfo: $moreInfo, '
        'statusCode: $statusCode, '
        'unrecoverable: $unrecoverable, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is APIError &&
        other.code == code &&
        other.details == details &&
        other.duration == duration &&
        other.exceptionFields == exceptionFields &&
        other.message == message &&
        other.moreInfo == moreInfo &&
        other.statusCode == statusCode &&
        other.unrecoverable == unrecoverable;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      code,
      details,
      duration,
      exceptionFields,
      message,
      moreInfo,
      statusCode,
      unrecoverable,
    ]);
  }
}
