// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class ScreensharingSettingsResponse {
  const ScreensharingSettingsResponse({
    required this.accessRequestEnabled,
    required this.enabled,
    this.targetResolution,
  });

  final bool accessRequestEnabled;

  final bool enabled;

  final TargetResolution? targetResolution;

  Map<String, dynamic> toJson() {
    return {
      'access_request_enabled': accessRequestEnabled,
      'enabled': enabled,
      'target_resolution': targetResolution,
    };
  }

  static ScreensharingSettingsResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ScreensharingSettingsResponse(
        accessRequestEnabled:
            mapValueOfType<bool>(json, r'access_request_enabled')!,
        enabled: mapValueOfType<bool>(json, r'enabled')!,
        targetResolution:
            TargetResolution?.fromJson(json[r'target_resolution'] ?? null),
      );
    }
    return null;
  }

  static List<ScreensharingSettingsResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ScreensharingSettingsResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ScreensharingSettingsResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ScreensharingSettingsResponse('
        'accessRequestEnabled: $accessRequestEnabled, '
        'enabled: $enabled, '
        'targetResolution: $targetResolution, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ScreensharingSettingsResponse &&
        other.accessRequestEnabled == accessRequestEnabled &&
        other.enabled == enabled &&
        other.targetResolution == targetResolution;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      accessRequestEnabled,
      enabled,
      targetResolution,
    ]);
  }
}
