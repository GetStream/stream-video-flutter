// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class BroadcastSettingsResponse {
  const BroadcastSettingsResponse({
    required this.enabled,
    required this.hls,
    required this.rtmp,
  });

  final bool enabled;

  final HLSSettingsResponse hls;

  final RTMPSettingsResponse rtmp;

  Map<String, dynamic> toJson() {
    return {
      'enabled': enabled,
      'hls': hls,
      'rtmp': rtmp,
    };
  }

  static BroadcastSettingsResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return BroadcastSettingsResponse(
        enabled: mapValueOfType<bool>(json, r'enabled')!,
        hls: HLSSettingsResponse.fromJson(json[r'hls'])!,
        rtmp: RTMPSettingsResponse.fromJson(json[r'rtmp'])!,
      );
    }
    return null;
  }

  static List<BroadcastSettingsResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <BroadcastSettingsResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = BroadcastSettingsResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'BroadcastSettingsResponse('
        'enabled: $enabled, '
        'hls: $hls, '
        'rtmp: $rtmp, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is BroadcastSettingsResponse &&
        other.enabled == enabled &&
        other.hls == hls &&
        other.rtmp == rtmp;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      enabled,
      hls,
      rtmp,
    ]);
  }
}
