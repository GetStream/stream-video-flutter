// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.

// ignore_for_file: use_string_in_part_of_directives
// ignore_for_file: unnecessary_raw_strings

part of openapi.api;

@immutable
class ParticipantReportResponse {
  const ParticipantReportResponse({
    this.byBrowser,
    this.byCountry,
    this.byDevice,
    this.byOperatingSystem,
    this.countOverTime,
    this.maxConcurrent,
    this.publishers,
    this.subscribers,
    required this.sum,
    required this.unique,
  });

  final List<GroupedStatsResponse>? byBrowser;

  final List<GroupedStatsResponse>? byCountry;

  final List<GroupedStatsResponse>? byDevice;

  final List<GroupedStatsResponse>? byOperatingSystem;

  final ParticipantCountOverTimeResponse? countOverTime;

  final int? maxConcurrent;

  final PublisherStatsResponse? publishers;

  final SubscriberStatsResponse? subscribers;

  final int sum;

  final int unique;

  Map<String, dynamic> toJson() {
    return {
      'by_browser': byBrowser,
      'by_country': byCountry,
      'by_device': byDevice,
      'by_operating_system': byOperatingSystem,
      'count_over_time': countOverTime,
      'max_concurrent': maxConcurrent,
      'publishers': publishers,
      'subscribers': subscribers,
      'sum': sum,
      'unique': unique,
    };
  }

  static ParticipantReportResponse? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      return ParticipantReportResponse(
        byBrowser: GroupedStatsResponse.listFromJson(json[r'by_browser']),
        byCountry: GroupedStatsResponse.listFromJson(json[r'by_country']),
        byDevice: GroupedStatsResponse.listFromJson(json[r'by_device']),
        byOperatingSystem:
            GroupedStatsResponse.listFromJson(json[r'by_operating_system']),
        countOverTime: ParticipantCountOverTimeResponse?.fromJson(
            json[r'count_over_time'] ?? null),
        maxConcurrent: mapValueOfType<int?>(json, r'max_concurrent', null),
        publishers:
            PublisherStatsResponse?.fromJson(json[r'publishers'] ?? null),
        subscribers:
            SubscriberStatsResponse?.fromJson(json[r'subscribers'] ?? null),
        sum: mapValueOfType<int>(json, r'sum')!,
        unique: mapValueOfType<int>(json, r'unique')!,
      );
    }
    return null;
  }

  static List<ParticipantReportResponse> listFromJson(
    dynamic json, {
    bool growable = false,
  }) {
    final result = <ParticipantReportResponse>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = ParticipantReportResponse.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  @override
  String toString() {
    return 'ParticipantReportResponse('
        'byBrowser: $byBrowser, '
        'byCountry: $byCountry, '
        'byDevice: $byDevice, '
        'byOperatingSystem: $byOperatingSystem, '
        'countOverTime: $countOverTime, '
        'maxConcurrent: $maxConcurrent, '
        'publishers: $publishers, '
        'subscribers: $subscribers, '
        'sum: $sum, '
        'unique: $unique, '
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ParticipantReportResponse &&
        other.byBrowser == byBrowser &&
        other.byCountry == byCountry &&
        other.byDevice == byDevice &&
        other.byOperatingSystem == byOperatingSystem &&
        other.countOverTime == countOverTime &&
        other.maxConcurrent == maxConcurrent &&
        other.publishers == publishers &&
        other.subscribers == subscribers &&
        other.sum == sum &&
        other.unique == unique;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      byBrowser,
      byCountry,
      byDevice,
      byOperatingSystem,
      countOverTime,
      maxConcurrent,
      publishers,
      subscribers,
      sum,
      unique,
    ]);
  }
}
