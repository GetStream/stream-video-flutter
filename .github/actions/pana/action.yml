name: Pana Workflow
description: "Runs pana and checks the score for the package"

inputs:
  min_score:
    description: "The minimum pana score required"
    required: false
    default: "120"
  pana_version:
    description: "The pana version to use"
    required: false
  runs_on:
    description: "The runner to use"
    required: false
    default: "ubuntu-latest"
  working_directory:
    description: "The working directory"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Temporary Override Local Dependencies
      uses: mikefarah/yq@master
      with:
        cmd: |
          yq eval '.dependency_overrides.stream_video = {"path": "../stream_video"}' -i pubspec.yaml
          yq eval '.dependency_overrides.stream_video_flutter = {"path": "../stream_video_flutter"}' -i pubspec.yaml
          yq eval '.dependency_overrides.stream_video_push_notification = {"path": "../stream_video_push_notification"}' -i pubspec.yaml
          yq eval '.dependency_overrides.stream_video_noise_cancellation = {"path": "../stream_video_noise_cancellation"}' -i pubspec.yaml

    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        cache: true
        channel: stable
        flutter-version: "3.x"
        cache-key: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}

    - name: Install Pana
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: flutter pub global activate pana ${{inputs.pana_version}}

    - name: Verify Pana Score
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: |
        PANA=$(pana . --no-warning); PANA_SCORE=$(echo $PANA | sed -n "s/.*Points: \([0-9]*\)\/\([0-9]*\)./\1\/\2/p")
        echo "Score: $PANA_SCORE"
        IFS='/'; read -a SCORE_ARR <<< "$PANA_SCORE"; SCORE=SCORE_ARR[0];
        if (( $SCORE < ${{inputs.min_score}} )); then echo "The minimum score of ${{inputs.min_score}} was not met!"; exit 1; fi
